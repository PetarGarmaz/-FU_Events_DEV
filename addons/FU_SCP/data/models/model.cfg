class CfgSkeletons {
	class Default {
		isDiscrete = 1;
		skeletonInherit = "";
		skeletonBones[] = {};
	};

	class OFP2_ManSkeleton	{
		isDiscrete = 0;
		skeletonInherit = "";
		skeletonBones[] =
		{
			"Pelvis","",
			"Spine","Pelvis",
			"Spine1","Spine",
			"Spine2","Spine1",
			"Spine3","Spine2",
			"Camera","Pelvis",
			"weapon","Spine1",
			"launcher","Spine1",
		//Head skeleton in hierarchy
			"neck","Spine3",
			"neck1","neck",
			"head","neck1",
		//New facial features
			"Face_Hub","head",
				"Face_Jawbone","Face_Hub",
					"Face_Jowl","Face_Jawbone",
					"Face_chopRight","Face_Jawbone",
					"Face_chopLeft","Face_Jawbone",
					"Face_LipLowerMiddle","Face_Jawbone",
					"Face_LipLowerLeft","Face_Jawbone",
					"Face_LipLowerRight","Face_Jawbone",
					"Face_Chin","Face_Jawbone",
					"Face_Tongue","Face_Jawbone",
				"Face_CornerRight","Face_Hub",
					"Face_CheekSideRight","Face_CornerRight",
				"Face_CornerLeft","Face_Hub",
					"Face_CheekSideLeft","Face_CornerLeft",
				"Face_CheekFrontRight","Face_Hub",
				"Face_CheekFrontLeft","Face_Hub",
				"Face_CheekUpperRight","Face_Hub",
				"Face_CheekUpperLeft","Face_Hub",
				"Face_LipUpperMiddle","Face_Hub",
				"Face_LipUpperRight","Face_Hub",
				"Face_LipUpperLeft","Face_Hub",
				"Face_NostrilRight","Face_Hub",
				"Face_NostrilLeft","Face_Hub",
				"Face_Forehead","Face_Hub",
					"Face_BrowFrontRight","Face_Forehead",
					"Face_BrowFrontLeft","Face_Forehead",
					"Face_BrowMiddle","Face_Forehead",
					"Face_BrowSideRight","Face_Forehead",
					"Face_BrowSideLeft","Face_Forehead",
				"Face_Eyelids","Face_Hub",
				"Face_EyelidUpperRight","Face_Hub",
				"Face_EyelidUpperLeft","Face_Hub",
				"Face_EyelidLowerRight","Face_Hub",
				"Face_EyelidLowerLeft","Face_Hub",
				"EyeLeft","Face_Hub",
				"EyeRight","Face_Hub",			
		//Left upper side
			"LeftShoulder","Spine3",
			"LeftArm","LeftShoulder",
			"LeftArmRoll","LeftArm",
			"LeftForeArm","LeftArmRoll",
			"LeftForeArmRoll","LeftForeArm",
			"LeftHand","LeftForeArmRoll",
			"LeftHandRing","LeftHand",
			"LeftHandRing1","LeftHandRing",
			"LeftHandRing2","LeftHandRing1",
			"LeftHandRing3","LeftHandRing2",
			"LeftHandPinky1","LeftHandRing",
			"LeftHandPinky2","LeftHandPinky1",
			"LeftHandPinky3","LeftHandPinky2",
			"LeftHandMiddle1","LeftHand",
			"LeftHandMiddle2","LeftHandMiddle1",
			"LeftHandMiddle3","LeftHandMiddle2",
			"LeftHandIndex1","LeftHand",
			"LeftHandIndex2","LeftHandIndex1",
			"LeftHandIndex3","LeftHandIndex2",
			"LeftHandThumb1","LeftHand",
			"LeftHandThumb2","LeftHandThumb1",
			"LeftHandThumb3","LeftHandThumb2",
		//Right upper side
			"RightShoulder","Spine3",
			"RightArm","RightShoulder",
			"RightArmRoll","RightArm",
			"RightForeArm","RightArmRoll",
			"RightForeArmRoll","RightForeArm",
			"RightHand","RightForeArmRoll",
			"RightHandRing","RightHand",
			"RightHandRing1","RightHandRing",
			"RightHandRing2","RightHandRing1",
			"RightHandRing3","RightHandRing2",
			"RightHandPinky1","RightHandRing",
			"RightHandPinky2","RightHandPinky1",
			"RightHandPinky3","RightHandPinky2",
			"RightHandMiddle1","RightHand",
			"RightHandMiddle2","RightHandMiddle1",
			"RightHandMiddle3","RightHandMiddle2",
			"RightHandIndex1","RightHand",
			"RightHandIndex2","RightHandIndex1",
			"RightHandIndex3","RightHandIndex2",
			"RightHandThumb1","RightHand",
			"RightHandThumb2","RightHandThumb1",
			"RightHandThumb3","RightHandThumb2",
		//Left lower side
			"LeftUpLeg","Pelvis",
			"LeftUpLegRoll","LeftUpLeg",
			"LeftLeg","LeftUpLegRoll",
			"LeftLegRoll","LeftLeg",
			"LeftFoot","LeftLegRoll",
			"LeftToeBase","LeftFoot",
		//Right lower side
			"RightUpLeg","Pelvis",
			"RightUpLegRoll","RightUpLeg",
			"RightLeg","RightUpLegRoll",
			"RightLegRoll","RightLeg",
			"RightFoot","RightLegRoll",
			"RightToeBase","RightFoot"
		};
		// location of pivot points (local axes) for hierarchical animation
		pivotsModel="A3\anims_f\data\skeleton\SkeletonPivots.p3d";
  	};

	class FU_SCP_093_Skeleton {
		isDiscrete = 0;
		skeletonInherit = "";
		
		skeletonBones[] = {"pivot","",
			"spine.001","pivot",
			"spine.002","spine.001",
			"neck","spine.002",
			"head","neck",
			"shoulder.L","spine.002",
			"arm.L","shoulder.L",
			"elbow.L","arm.L",
			"hand.L","elbow.L",
			"finger.thumb.001","hand.L",
			"finger.thumb.002","finger.thumb.001",
			"finger.index.001","hand.L",
			"finger.index.002","finger.index.001",
			"finger.index.003","finger.index.002",
			"finger.mid.001","hand.L",
			"finger.mid.002","finger.mid.001",
			"finger.mid.003","finger.mid.002",
			"finger.ring.001","hand.L",
			"finger.ring.002","finger.ring.001",
			"finger.ring.003","finger.ring.002",
			"finger.pink.001","hand.L",
			"finger.pink.002","finger.pink.001",
			"finger.pink.003","finger.pink.002",
			"shoulder.R","spine.002",
			"arm.R","shoulder.R",
			"elbow.R","arm.R",
			"hand.R","elbow.R",
			"thumb.R.001","hand.R",
			"thumb.R.002","thumb.R.001",
			"index.R.001","hand.R",
			"index.R.002","index.R.001",
			"index.R.003","index.R.002",
			"middle.R.001","hand.R",
			"middle.R.002","middle.R.001",
			"middle.R.003","middle.R.002",
			"ring.R.001","hand.R",
			"ring.R.002","ring.R.001",
			"ring.R.003","ring.R.002",
			"pink.R.001","hand.R",
			"pink.R.002","pink.R.001",
			"pink.R.003","pink.R.002"
		};
	};

	class FU_SCP_610_Skeleton: Default {
		skeletonInherit = "";
		skeletonBones[] = {
			"Pivot", "",
			"1", "Pivot",
			"2", "1",
			"3", "2",
			"4", "3",
			"5", "4",
			"6", "5",
			"7", "6",
			"8", "7",
			"9", "8",
			"10", "9",
			"11", "10",
			"12", "11",
		};
		pivotsModel = "";	// Location of pivot points (local axes) for hierarchical animation. (A2 only)
		isDiscrete = 0;
	};

	class FU_SCP_3000_Skeleton: Default {
		skeletonInherit = "";
		skeletonBones[] = {
			"Pivot", "",
			"1", "Pivot",
			"11", "1",
			"2", "11",
			"22", "2",
			"3", "22",
			"33", "3",
			"4", "33",
			"44", "4",
			"5", "44",
			"55", "5",
			"6", "55",
			"66", "6",
			"7", "66",
			"77", "6",
			"Neck", "77",
			"Head", "Neck",
			"Mouth", "Head",
		};
		pivotsModel = "";	// Location of pivot points (local axes) for hierarchical animation. (A2 only)
		isDiscrete = 0;
	};
};

class CfgModels {
	class Default {
		sectionsInherit="";
		sections[] = {};
		skeletonName = "";
	};

	class ArmaMan: Default {
		htMin = 60;          // Minimum half-cooling time (in seconds)
		htMax = 1800;        // Maximum half-cooling time (in seconds)
		afMax = 30;          // Maximum temperature in case the model is alive (in celsius)
		mfMax = 0;           // Maximum temperature when the model is moving (in celsius)
		mFact = 1;           // Metabolism factor - number from interval <0, 1> (0 - metabolism has no influence, 1 - metabolism has full influence (no other temperature source will be considered)).
		tBody = 37;  // Metabolism temperature of the model (in celsius)

		sections[] = {
			"osobnost","Head_Injury","Body_Injury","l_leg_injury","l_arm_injury","r_arm_injury","r_leg_injury","injury_body", "injury_legs", "injury_hands",
			"clan","clan_sign","Camo","CamoB","Camo1","Camo2","personality","hl", "injury_head"
		};
		skeletonName = "OFP2_ManSkeleton";
	};

	class FU_SCP_610_Base: Default {
		htMin = 60;
		htMax = 1800;
		afMax = 30;
		mfMax = 0;
		mFact = 1;
		tBody = 37;

		sections[] = {
			"Pivot", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"
		};

		class Animations {
			class Node_3 {
				type = "rotationZ";			// The type of animation.
				source = "Node_3";				// The controller that provides input.
				selection = "3";			// The name of the skeleton bone used.
				axis = "3";
				memory = true;				// Is the axis defined in the memory LOD of the model or not?
				sourceAddress = "mirror";		// Does the animation loop or not?
				minValue = 0;				// The minimum value of the motion range. i.e. The controller input when animation phase is 0.
				maxValue = 1;				// The maximum value of the motion range.
				minPhase = 0;
				maxPhase = 1;
				angle0 = 0;					// The starting angle of this animation, where the animation phase is minValue
				angle1 = "rad 40";		// The ending angle of this animation,
				animPeriod = 3;
			};					

			class Node_6 {
				type = "rotationX";			// The type of animation.
				source = "Node_6";				// The controller that provides input.
				selection = "6";			// The name of the skeleton bone used.
				axis = "6";
				memory = true;				// Is the axis defined in the memory LOD of the model or not?
				sourceAddress = "mirror";		// Does the animation loop or not?
				minValue = 0;				// The minimum value of the motion range. i.e. The controller input when animation phase is 0.
				maxValue = 1;				// The maximum value of the motion range.
				minPhase = 0;
				maxPhase = 1;
				angle0 = 0;					// The starting angle of this animation, where the animation phase is minValue
				angle1 = "rad -40";		// The ending angle of this animation,
				animPeriod = 3;
			};

			class Node_8 {
				type = "rotationX";			// The type of animation.
				source = "Node_8";				// The controller that provides input.
				selection = "8";			// The name of the skeleton bone used.
				axis = "8";
				memory = true;				// Is the axis defined in the memory LOD of the model or not?
				sourceAddress = "mirror";		// Does the animation loop or not?
				minPhase = 0;
				maxPhase = 1;
				minValue = 0;				// The minimum value of the motion range. i.e. The controller input when animation phase is 0.
				maxValue = 1;				// The maximum value of the motion range.
				angle0 = 0;					// The starting angle of this animation, where the animation phase is minValue
				angle1 = "rad -40";		// The ending angle of this animation,
				animPeriod = 3;
			};

			class Translate_Pivot {
				type = "translationY";			// The type of animation.
				source = "Translate_Pivot";				// The controller that provides input.
				selection = "Pivot";			// The name of the skeleton bone used.
				axis = "Pivot";
				memory = true;				// Is the axis defined in the memory LOD of the model or not?
				sourceAddress = "clamp";		// Does the animation loop or not?
				minPhase = 0;
				maxPhase = 1;
				minValue = 0;				// The minimum value of the motion range. i.e. The controller input when animation phase is 0.
				maxValue = 1;				// The maximum value of the motion range.
				offset0 = 0;
				offset1 = 1000;
				axisOffset = 1000;
			};
		};

		skeletonName = "FU_SCP_610_Skeleton";
	};

	class FU_SCP_093_Base: Default {
		htMin = 60;
		htMax = 1800;
		afMax = 30;
		mfMax = 0;
		mFact = 1;
		tBody = 37;
		skeletonName = "FU_SCP_093_Skeleton";
	};

	class FU_SCP_3000_Base: Default {
		htMin = 60;
		htMax = 1800;
		afMax = 30;
		mfMax = 0;
		mFact = 1;
		tBody = 37;

		sections[] = {
			"Pivot", "1", "11", "2", "22", "3", "33", "4", "44", "5", "55", "6", "66", "7", "77", "Neck", "Head", "Mouth"
		};

		skeletonName = "FU_SCP_3000_Skeleton";
	};

	class FU_SCP_610_A_Collider: FU_SCP_610_Base {};
	class FU_SCP_610_A: FU_SCP_610_Base {};
	class FU_SCP_2191_1: ArmaMan {};
	class FU_SCP_093_BlackMan: ArmaMan {};
	class FU_SCP_093: FU_SCP_093_Base {};
	class FU_SCP_093_Collider: Default {};
	class FU_SCP_093_Disk: Default {};
	class FU_SCP_InvisibleMan: ArmaMan {};
	class FU_Tentacle_Small: FU_SCP_610_Base {};
	class FU_Tentacle_Big: FU_SCP_610_Base {};
	class FU_Skeleton: ArmaMan {};
	class FU_Skeleton_Boss: FU_SCP_093_Base {};
	class FU_Rupture: Default {};
	class FU_SCP_3000: FU_SCP_3000_Base {};
	class FU_SCP_3000_Dive: FU_SCP_3000_Base {};
	class FU_SCP_3000_Body: Default {};
	class FU_SCP_3000_Col: Default {};
};